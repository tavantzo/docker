FROM php:7.1-fpm-alpine3.8
MAINTAINER George Tavantzopoulos

ENV REDIS_VERSION 3.1.3
ENV IGBINARY_VERSION 2.0.4
ENV SDK_TOOLS "4333796"
ENV BUILD_TOOLS "28.0.3"
ENV TARGET_SDK "28"
ENV ANDROID_HOME "/opt/sdk"
ENV GLIBC_VERSION "2.28-r0"

ENV DEVDEPS freetype-dev \
        libjpeg-turbo-dev \
        libpng-dev \
        # mcrypt deps
        libmcrypt-dev \
        # memcached dep
        libmemcached-dev \
        # soap dep
        libxml2-dev \
        # oauth dep
        pcre-dev \
        icu-dev \
        # cassandra deps
        cmake \
        autoconf \
        g++ \
        gcc \
        cmake \
        make \
        openssl-dev \
        libuv-dev \
        gmp-dev \
        libzip-dev

RUN apk update && apk add --no-cache --virtual .build-deps  $PHPIZE_DEPS \
        && apk add --no-cache ${DEVDEPS} \
        && apk add --no-cache git libuv gmp libstdc++ mariadb-client python py-pip libssl1.0 \
                alpine-sdk openjdk8 \
        && apk add --no-cache --virtual=.build-dependencies wget unzip ca-certificates bash \
        && wget https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -O /etc/apk/keys/sgerrand.rsa.pub && \
        wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/glibc-${GLIBC_VERSION}.apk -O /tmp/glibc.apk && \
	wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/glibc-bin-${GLIBC_VERSION}.apk -O /tmp/glibc-bin.apk && \
	apk add --no-cache /tmp/glibc.apk /tmp/glibc-bin.apk && \
	rm -rf /tmp/* && \
	rm -rf /var/cache/apk/* && \
        wget http://dl.google.com/android/repository/sdk-tools-linux-${SDK_TOOLS}.zip -O /tmp/tools.zip && \
	mkdir -p ${ANDROID_HOME} && \
	unzip /tmp/tools.zip -d ${ANDROID_HOME} && \
	rm -v /tmp/tools.zip && \
        mkdir -p /root/.android/ && \
        touch /root/.android/repositories.cfg && \
	yes | ${ANDROID_HOME}/tools/bin/sdkmanager "--licenses" && \
	${ANDROID_HOME}/tools/bin/sdkmanager "--update" && \
	${ANDROID_HOME}/tools/bin/sdkmanager "build-tools;${BUILD_TOOLS}" \
                "extras;android;m2repository" \
                "extras;google;google_play_services" \
                "extras;google;m2repository" && \
        pecl install xdebug && \
        rm -rf /tmp/pear && \
        docker-php-ext-enable xdebug && \
        php -m | grep xdebug && \
        pecl install igbinary-${IGBINARY_VERSION} && \
        rm -rf /tmp/pear && \
        docker-php-ext-enable igbinary && \
        php -m | grep igbinary && \
        mkdir -p /tmp/pear && \
        cd /tmp/pear && \
        pecl bundle redis-$REDIS_VERSION && \
        cd redis && \
        phpize . && \
        ./configure --enable-redis-igbinary && \
        make && \
        make install && \
        cd ~ && \
        rm -rf /tmp/pear && \
        docker-php-ext-enable redis && \
        php -m | grep redis && \
        cd /lib && \
        git clone https://github.com/datastax/cpp-driver.git cpp-driver && \
        cd cpp-driver && \
        git checkout tags/2.7.0 && \
        mkdir build && \
        cd build && \
        cmake -DCASS_BUILD_STATIC=ON -DCASS_BUILD_SHARED=ON .. && \
        make -j4 && \
        make install && \
        ln -s /usr/local/lib64/libcassandra* /usr/local/lib/ && \
        pecl install cassandra-1.3.2 && \
        docker-php-ext-enable cassandra && \
        rm -rf /tmp/pear && \
        php -m | grep cassandra && \
        pecl install mongodb \
        && pecl install memcached \
        && pecl install oauth mcrypt \
        && docker-php-ext-enable memcached mongodb cassandra oauth \
        && docker-php-ext-configure intl --enable-intl \
        && docker-php-ext-configure pdo_mysql --with-pdo-mysql \
        && docker-php-ext-configure soap --enable-soap \
        && docker-php-ext-configure mbstring --enable-mbstring \
        && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \
        && docker-php-ext-install -j$(nproc) \
                iconv \
                opcache \
                pdo \
                pdo_mysql \
                soap \
                mbstring \
                intl \
                zip \
                gd \
        && pip install cqlsh \
        && apk del .build-deps \
        # Composer INstall
        && cd /tmp \
        && php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" \
        && php -r "if (hash_file('sha384', 'composer-setup.php') === '93b54496392c062774670ac18b134c3b3a95e5a5e5c8f1a9f115f203b75bf9a129d5daa8ba6a13e2cc8a1da0806388a8') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;" \
        && php composer-setup.php --install-dir=/usr/local/bin --filename=composer \
        && unlink composer-setup.php

WORKDIR /data
ENTRYPOINT ["docker-php-entrypoint"]
CMD ["php", "-a"]